EOM  - An Emulation and Operations Monitoring Tool
==================================================

The purpose of this tool is to provide an emulation environment in which
an ISP (or other BGP AS) can analyze the impact of planned deployment of
RPKI validation in local conditions, without impacting their routing
operations. The EOM Tool is expected to assist the operator in scenarios
such as the following (note that not all of these features are
implemented yet).

* Assessing if the best route selection changes when validation is enabled.
* Assessing the manner in which the best path changes when different localpref/weight settings are used.
* Combining data from multiple routers in different ASNs to check for any routing-level inconsistencies.
* Assessing potential problems associated with validating prefixes in a multihoming environment.
* Assessing whether an ISPâ€™s reliance on multiple rpki-rtr manager instances could result in routing-level inconsistencies.
* Testing custom prefix assignment and certification conditions for simulation of failures and other special scenarios - e.g. resource transfers.

High-level overview
-------------------

The block diagram above highlights the different sub-components within
the EOM tool. At a high level the EOM tool fetches RPKI information
from one or more RPKI caches, polls RIB related information from routers,
analyzes the different pieces of data retrived from these data
sources against various parameters, and display its results through some
front-end (note that not all components are implemented yet).

.. image:: /images/EOM-Block-Diag.png
   :height: 500px
   :width: 1000px


The following sub-sections describe the functionality associated with
each EOM tool sub-component.

rpki-rtr-cli
~~~~~~~~~~~~

This component provides the client interface to the rpki-rtr
protocol.  It builds upon the existing rpki-rtr
implementations but instead of communicating with a router this
module interfaces with an aggregator module that maintains a
local data store of validated RPKI information.

The rpki-rtr-cli module can communicate with multiple rpki-rtr manager
instances in order to be able to mimic cases where an ISP relies on
multiple rpki-rtr manager instances for serving validated RPKI
information to its various ASBR routers.

rtr-status-fetcher
~~~~~~~~~~~~~~~~~~

This module is responsible for fetching various pieces of status
information from a router, including its routing table and next hop
neighbors. Data from a router is fetched using the Trigger python
module for multiple routers. The rtr-status-fetcher module saves
all fetched data into a local store through the aggregator module. 

aggregator
~~~~~~~~~~

This module is responsible for storing and retrieving validated
rpki route objects associated with various rpki-rtr manager instances
and router status information for the different routers queried.

EOM-engine
~~~~~~~~~~

The EOM-Engine module is responsible for providing the
central functionality for enabling a network operator to configure
and develop various types of operational scenarios and router policies
to study the impact of RPKI validation on their network operations. 

This module is still under development, but is expected to interface
with the UI module to gather user input on the types of analyses that
are to be performed. It will access previously saved router and RPKI
cache data through the aggregator module and prepare the data for
subsequent analysis by other modules.

In order to build scenarios that include misconfigured or particular
forms of RPKI validation data, the EOM engine will also interface with a
private RPKI store that will allow the user to build test ROAs on the
fly to simulate various prefix assignment and certification conditions.

analyzer
~~~~~~~~

This module provides the first level of analysis over the
different streams of data that are made available to it.  The primary
function of this module is to detect and flag differences in the routing
state.

reporter
~~~~~~~~

The reporter takes the raw results generated by the
analyzer module and transforms that data to a form that is useful for
user consumption. Differences are currently represented as simple text
but will later be color coded and marked up to clearly highlight any
differences. 

notifier
~~~~~~~~

This module is still to be developed.

The notifier module will be responsible for processing the results from
the analyzer module in order to present those results to the user in an
intuitive manner in order to help them develop additional test scenarios
in an iterative manner. In the future, when the EOM tool is used as a
monitoring tool, this module will also provide user notification
capabilities to warn and alert the user of existing and impending
problems.

UI
~~

This module is still to be developed.

The User Interface module will provide the engine for displaying the
various pieces of data generated by the data-reporter and notifier
modules. This module will also provide the configuration interface for
the users, to enable them to specify the location and parameters
associated with the different routers and RPKI stores, and to enable
them to define the parameters associated with their different scenarios
of interest.


